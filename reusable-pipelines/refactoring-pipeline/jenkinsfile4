pipeline {
    agent any

    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a Release Candidate?')
    }

    environment {
        RELEASE_VERSION = '1.1.0'
        INT_VERSION = 'R2'
    }
    stages {
        stage('Audit tools') {
            steps {
                auditTools()
            }
        }

        stage('Unit Test') {
            steps {
                dir('./java-tomcat-sample') {
                    sh '''
                        echo "Executing Unit Tests..."
                        mvn test
                    '''
                }
            }
        }

        stage('Build') {
            environment {
                VERSION_SUFFIX = getBuildVersion()
            }
            steps {
                echo "Building version: ${INT_VERSION} with suffix: ${VERSION_SUFFIX}"
                echo 'Mention your Application Build Code here!!!'
                dir('./java-tomcat-sample') {
                    packageApplication()
                }
            }
        }

        stage('Publish') {
            // when {
            //     expression { return params.RELEASE }
            // }

            steps {
                archiveArtifacts('**/*.war')
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

String getBuildVersion() {
    if (params.RELEASE) {
        return env.RELEASE_VERSION + ':' + env.BUILD_NUMBER
    } else {
        return env.INT_VERSION + '+ci:' + env.BUILD_NUMBER
    }
}

void auditTools() {
sh '''
    # Check and install Git
    if ! command -v git &> /dev/null
    then
        echo "Git is not installed. Installing Git..."
        sudo apt-get update
        sudo apt-get install -y git
    else
        echo "Git is already installed."
        git --version
    fi

    # Check and install Java
    if ! command -v java &> /dev/null
    then
        echo "Java is not installed. Installing Java..."
        sudo apt-get update
        sudo apt-get install -y default-jdk
    else
        echo "Java is already installed."
        java -version
    fi

    # Check and install Maven
    if ! command -v mvn &> /dev/null
    then
        echo "Maven is not installed. Installing Maven..."
        sudo apt-get update
        sudo apt-get install -y maven
    else
        echo "Maven is already installed."
        mvn -version
    fi
'''
}

void packageApplication() {
    sh '''
        mvn versions:set -DnewVersion="${VERSION_SUFFIX}"-SNAPSHOT
        mvn versions:update-child-modules
        mvn clean package
    '''
}
